@use 'config/colors';
@use 'config/fonts';
@use 'functions/color';
@use 'mixins/flex';
@use 'mixins/font';
@use 'mixins/position';
@use 'mixins/spacing';
@use 'mixins/transition';

.container {
  grid-template-columns: minmax(35px, 1fr) repeat(6, minmax(45px, 1.25fr));
  column-gap: 5px;
  // row-gap: 3px;

  &.verySmol {
    grid-template-columns: minmax(0, 1fr) repeat(6, minmax(0, 1.25fr));
  }

  &.veryThicc {
    max-width: 450px;
    @include spacing.margin-xy($x: auto);
  }

  // in gen 1, there's one less column since SPD isn't a thing (and SPA is called SPC).
  // gen 2 has SPD, so this should only be applied for gen 1.
  &.legacySpc {
    grid-template-columns: minmax(35px, 1fr) repeat(5, minmax(45px, 1.25fr));

    &.verySmol {
      grid-template-columns: minmax(0, 1fr) repeat(5, minmax(0, 1.25fr));
    }
  }
}

.small {
  font-size: 8px;
}

.header {
  @include font.apply(fonts.$primary, ( font-weight: 500 ));
}

.statHeader {
  @include transition.apply(color);

  &.up {
    color: color.alpha(colors.$red, 0.75);
  }

  &.down {
    color: color.alpha(colors.$blue, 0.75);
  }
}

.valueFieldContainer {
  @include flex.row($justify: center);
}

.valueField {
  &.disabled {
    opacity: 1;
  }

  .light &.disabled {
    color: colors.$black;
  }

  .dark &.disabled {
    color: colors.$white;
  }

  // by defaults, applies -$padding-x and -$padding-y in ValueField's styles,
  // so we reset the absolute positions to 0 with position.absolute-fill()
  &::before {
    @include position.absolute-fill;
  }
}

.valueFieldInput {
  .baseStatField.pristine &, .disabled & {
    color: inherit;
  }

  &.missingSpread {
    color: colors.$orange;
  }
}

.ivsHeader {
  @include transition.apply(color);

  &.missingSpread {
    color: colors.$orange;
  }
}

.ivField {
  max-width: 30px;
}

.evsHeader {
  @include transition.apply(color);

  // not possible for evsHeader to have both missingSpread and illegal
  // (since illegal would only applied if there are any EVs at all!)
  &.missingSpread {
    color: colors.$orange;
  }

  &.unallocated {
    color: colors.$cyan;
  }

  &.illegal {
    color: colors.$red;
  }
}

.evField {
  max-width: 30px;
}

.statValue {
  @include transition.apply(color);

  &.positive {
    color: colors.$green;
  }

  &.negative {
    color: colors.$red;
  }

  &.finalStat {
    font-size: 11px;
  }
}

.stageValue {
  @include flex.row-center;
}

.boostButton {
  @include spacing.margin-xy($x: 3px);

  &.pristine {
    color: inherit;

    .boostButtonLabel {
      color: inherit;
    }
  }

  &.disabled {
    opacity: 0.65; // default 0.3 opacity is too faded
  }
}

.boostBaseStatButton {
  @include spacing.margin-none;
  font-family: inherit;
  font-weight: inherit;
  font-size: inherit;
  text-transform: inherit;

  &.disabled {
    opacity: 1;
  }
}

.boostModButtonLabel {
  .light & {
    color: colors.$black;
  }

  .dark & {
    color: colors.$white;
  }
}
