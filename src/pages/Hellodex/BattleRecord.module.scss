@use 'sass:map';
@use 'config/colors';
@use 'config/fonts';
@use 'functions/color';
@use 'mixins/flex';
@use 'mixins/font';
@use 'mixins/spacing';
@use 'mixins/transition';

$container: (
  padding-x: 20px,
  padding-y: 7px,
  border-radius: 30px,

  background-color: (
    light: color.alpha(colors.$white, 0.9),
    dark: color.alpha(colors.$black, 0.75),
  ),

  box-shadow: (
    light: (
      0 0 1px color.alpha(colors.$black, 0.15),
      0 0 5px color.alpha(colors.$gray-dark, 0.3),
    ),

    dark: (
      0 0 1px color.alpha(colors.$white, 0.3),
      0 0 5px color.alpha(colors.$black, 0.5),
    ),
  ),
);

$record-separator: (
  width: 1px,
  height: 10px,
  spacing: 15px,

  background-color: (
    light: color.alpha(colors.$black, 0.3),
    dark: color.alpha(colors.$white, 0.3),
  ),
);

$record-value: (
  font-size: 17px,

  color: (
    default: (
      light: color.alpha(colors.$black, 0.95),
      dark: color.alpha(colors.$white, 0.95),
    ),

    zero: (
      light: color.alpha(colors.$black, 0.5),
      dark: color.alpha(colors.$white, 0.5),
    ),
  ),
);

$record-label: (
  spacing-win: 10px,
  spacing-loss: 12px,
  font-weight: 500,
  font-size: 12px,

  color: (
    light: color.alpha(colors.$black, 0.5),
    dark: color.alpha(colors.$white, 0.5),
  ),
);

.container {
  position: relative;
  @include spacing.padding-xy($x: map.get($container, padding-x), $y: map.get($container, padding-y));
  border-radius: map.get($container, border-radius);
  @include transition.apply(background-color, box-shadow);

  &.light {
    background-color: map.get($container, background-color, light);
    box-shadow: map.get($container, box-shadow, light);
  }

  &.dark {
    background-color: map.get($container, background-color, dark);
    box-shadow: map.get($container, box-shadow, dark);
  }
}

.records {
  @include flex.row($align: center);
  user-select: none;
}

.recordValue {
  @include font.apply(fonts.$mono);
  font-size: map.get($record-value, font-size);
  @include transition.apply(color);

  .light & {
    color: map.get($record-value, color, default, light);
  }

  .dark & {
    color: map.get($record-value, color, default, dark);
  }

  &.zero {
    .light & {
      color: map.get($record-value, color, zero, light);
    }

    .dark & {
      color: map.get($record-value, color, zero, dark);
    }
  }
}

.recordLabel {
  font-weight: map.get($record-label, font-weight);
  font-size: map.get($record-label, font-size);
  text-transform: uppercase;
  @include transition.apply(color);
  // user-select: none;
  // pointer-events: none;

  &.win {
    @include spacing.margin($left: map.get($record-label, spacing-win));
  }

  &.loss {
    @include spacing.margin($right: map.get($record-label, spacing-loss));
  }

  .light & {
    color: map.get($record-label, color, light);
  }

  .dark & {
    color: map.get($record-label, color, dark);
  }
}

.recordSeparator {
  width: map.get($record-separator, width);
  height: map.get($record-separator, height);
  @include spacing.margin-xy($x: map.get($record-separator, spacing));
  @include transition.apply(background-color);
  // user-select: none;
  pointer-events: none;

  .light & {
    background-color: map.get($record-separator, background-color, light);
  }

  .dark & {
    background-color: map.get($record-separator, background-color, dark);
  }
}
